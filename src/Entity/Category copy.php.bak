<?php

namespace App\Entity;

use App\Entity\Pogs;
use Doctrine\ORM\Mapping as ORM;
use App\Repository\CategoryRepository;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * @ORM\Entity(repositoryClass=CategoryRepository::class)
 */
class Category
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $name;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $description;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $imgpath;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $slug;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Product", mappedBy="category")
     */
    private $products;

    /**
     * @ORM\OneToMany(targetEntity=Pogs::class, mappedBy="products")
     */
    private $pogs;

    public function __construct()
    {
        $this->products = new ArrayCollection();
        $this->pogs = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;

        return $this;
    }

    public function getImgpath(): ?string
    {
        return $this->imgpath;
    }

    public function setImgpath(string $imgpath): self
    {
        $this->imgpath = $imgpath;

        return $this;
    }

    public function getSlug(): ?string
    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * @return Collection<int, Pogs>
     */
    public function getPogs(): Collection
    {
        return $this->pogs;
    }

    public function addPog(Pogs $pog): self
    {
        if (!$this->pogs->contains($pog)) {
            $this->pogs[] = $pog;
            $pog->setProducts($this);
        }

        return $this;
    }

    public function removePog(Pogs $pog): self
    {
        if ($this->pogs->removeElement($pog)) {
            // set the owning side to null (unless already changed)
            if ($pog->getProducts() === $this) {
                $pog->setProducts(null);
            }
        }

        return $this;
    }
}
